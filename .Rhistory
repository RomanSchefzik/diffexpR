2019-06-06 12:08:37 (4,38 MB/s) - ‘/tmp/RtmpIh2h7l/downloaded_packages/testthat_2.1.1.tar.gz’ saved [231172/231172]
* installing *source* package ‘testthat’ ...
** package ‘testthat’ successfully unpacked and MD5 sums checked
** libs
gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG -I../inst/include -DCOMPILING_TESTTHAT     -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG -I../inst/include -DCOMPILING_TESTTHAT     -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c reassign.c -o reassign.o
g++ -I/usr/share/R/include -DNDEBUG -I../inst/include -DCOMPILING_TESTTHAT     -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c test-catch.cpp -o test-catch.o
g++ -I/usr/share/R/include -DNDEBUG -I../inst/include -DCOMPILING_TESTTHAT     -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c test-example.cpp -o test-example.o
g++ -I/usr/share/R/include -DNDEBUG -I../inst/include -DCOMPILING_TESTTHAT     -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c test-runner.cpp -o test-runner.o
g++ -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o testthat.so init.o reassign.o test-catch.o test-example.o test-runner.o -L/usr/lib/R/lib -lR
installing to /home/julian/R/x86_64-pc-linux-gnu-library/3.2/testthat/libs
** R
** inst
** preparing package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded
* DONE (testthat)
The downloaded source packages are in
‘/tmp/RtmpIh2h7l/downloaded_packages’
> library("testthat")
>     value<-wasserstein1d(x,y,p=2)
Error in wasserstein1d(x, y, p = 2) : object 'x' not
library(Rcpp)
install.packages("devtools")
install.packages("devtools")
install.packages("curl")
curl
library("curl")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
set.seed(139)
v <- rnorm(00)
v <- rnorm(100)
v[28]
-1.13005 ** 2
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
2.3 ** 2
-1.30005 **2
v <- c(-1.30005,2.3)
numericVectorPow(v, 2)
v
v <- rnorm(10)
v
sort(v)
v
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
source("Desktop/scrna-diffexpr/test/test-wasserstein-rcpp.r")
install.packages
install.packages("devtools")
install.packages("devtools")
install.packages("usethis")
install.packages("devtools", dependencies=TRUE)
library("devtools")
wasserstein_metric()
wasserstein_metric
wasserstein_metric(c(1,2,3), c(2,3,4))
wasserstein_metric(c(1,2,3), c(2,3,4), 1)
wasserstein_metric(c(1,2,3, 3,4,4), c(2,3,4,4534), 1)
copy
a.copy
a = c(1,2)
b= a
b[1] = 2
a
v <- c(12 ,20, 22, 31)
mean(v **(1/2))
a <- c(13,21,34,23)
b <- c(1,1,1,2.3)
m <- length(a)
n <- length(b)
stopifnot(m > 0 && n > 0)
if (m == n && is.null(wa) && is.null(wb)) {
return( mean( abs( sort(b) - sort(a) )^p )^(1/p))
}
m <- length(a)
n <- length(b)
stopifnot(m > 0 && n > 0)
if (m == n ) {
return( mean( abs( sort(b) - sort(a) )^p )^(1/p))
}
p = 2
m <- length(a)
n <- length(b)
stopifnot(m > 0 && n > 0)
if (m == n ) {
return( mean( abs( sort(b) - sort(a) )^p )^(1/p))
}
m <- length(a)
n <- length(b)
if (m == n ) {
return( mean( abs( sort(b) - sort(a) )^p )^(1/p))
}
m
n
mean( abs( sort(b) - sort(a) )^p )^(1/p)
mean( abs( sort(b) - sort(a) )^p )^(1/p)
sort(b)
out_cpp <- c(12, 20, 22, 31)
a
b
abs( sort(b) - sort(a) )^p
help(cumsum)
cumsum(1:10)
a
a/sum(a)
sum(a/sum(a))
sum(a/sum(a))[-1]
sum(a/sum(a))[-2]
sum(a/sum(a))[-3]
sum(a/sum(a))[-]
sum(a/sum(a))[-4]
a/sum(a)[-4]
(a/sum(a))[-4]
sum(c(1,1,2))
help(cut)
a
b
wasserstein_metric(a,b,3)
wasserstein1d(a,b,3)
source("test-wasserstein-rcpp.r")
pwd()
getcwd()
cwd()
getwd()
setwd("Desktop")
dir()
setwd("scrna-diffexpr")
dir()
setwd("diffexpR/")
ls
dir
dir()
ls()
dir()
source ("test-wasserstein-rcpp.r")
a
b
wasserstein1d(a,b)
wasserstein_metric(a,b)
wasserstein_metric(a,b,2)
wasserstein1d(a,b,2)
wasserstein_metric(a,b,3)
wasserstein1d(a,b,3)
expect_equal(wasserstein_metric(a,b,3), wasserstein1d(a,b,3))
wasserstein1d(a,b,3) - 0.000001
wasserstein1d(a,b,3) - 0.0000001
wasserstein_metric(a,b,3) - 0.0000001
wasserstein_metric(a,b,3) - 0.000001
wasserstein_metric(a,b,3) - 0.00001
help("precip")
ls
wasserstein()
help(wasserstein)
edit(wasserstein9)
edit(wasserstein)
c(1,2,3)[-3]
table(c(2,3,4,4,4,4,4,4,4,3,3,3,32,2,3))
help(wasserstein1d)
x <- rnorm(100,1,0.5)
plot(x)
hist(x)
edf(x)
ecdf(x)
plot(ecdf(x))
x <- rnorm(10000,1,0.5)
plot(ecdf(x))
hist(x)
y <- c(rnorm(5000,0.25,0.5), rnorm(500,0.5,0.5)
)
y
hist(y)
plot(y)
y <- c(rnorm(5000,2,0.5), rnorm(5000, 0.5,0.5))
hist(y)
plot(y)
plot(sample(y))
plot(sample(y,size = 1000))
hist(plot(sample(y,1000)))
hist(sample(y,1000))
ecdf(y)
plot(ecdf(y))
cor(x = ecdf(y),y = ecdf(x), method = "pearson")
c(ecdf(y)
)
unlist(ecdf(y))
unlist(ecdf(y))
list(ecdf(y))
help(ecdf)
cumsm(y9)
cumsm(y)
cumsum(y)
plot(cumsum(y))
plot(cumsum(sample(y)))
plot(cumsum(sample(x)))
cor(cumsum(sample(x)), cor(cumsum(sample(y))))
cor(cumsum(sample(x)), cumsum(sample(y)))
y <- c(rnorm(5000,4,0.5), rnorm(5000, 8 ,0.5))
plot(y)
plot(sample(y))
hist(sample(y))
cumsum(sample(y))
plot(cumsum(sample(y)))
plot(ecdf(y))
plot(ecdf(x))
ecdf(y).default
distx <- ecdf(x)
distx.data
distx
distx()
distx(2)
Vectorize(distx)
dx = distx(1:1000)
plot(dx)
plot(ecdf(x))
valsx = Vectorize(distx)
plot(valsx)
valsx = Vectorize(distx, c(0:4))
valsy = Vectorize(ecdf(y))
plot(valsy)
corr(valsy, valsx)
cor(valsy, valsx)
cor(valsy, valsx)
valsy
valsy()
disty <- ecdf(y)
disty
valsy = Vectorize()
valsy = Vectorize(disty)
cor(valsy, valsx)
plot(ecdf(x))
plot(ecdf(y))
help(wasserstein_metric)
??wasserstein_metric
x
y
i <- c(1:100)
j <- c(301:400)
cor(i,j, method="pearson")
i <- rnorm(100, mean=0, sd=1)
j <- rnorm(100, mean=20, sd=1)
plot(i)
plot(j)
ecdf(i)
plot(ecdf(i)
)
plot(ecdf(j)
)
i <- rnorm(1000, mean=0, sd=1)
plot(ecdf(i))
j <- rnorm(1000, mean=20, sd=1)
plot(ecdf(j))
Vectorize(j, 1000)
help(series)
help(seq)
x <- i
y <- j
i <- seq(from  = 0, to = 30, 300)
i
i <- seq(from  = 0, to = 30, length.out=300)
i
xvals = ecdf(x)
xvals = ecdf(i)
ecdf(x)(i)
yvals = ecdf(y)(i)
xvals = ecdf(x)(i)
cor(yvals,xvals)
yvals
plt(yvals, xvals)
plot(yvals, xvals)
plot(yvals)
plot(xvals)
plot(Vectorize(function(p) {x^p}))
plot(Vectorize(function(p) {return x^p}))
plot(Vectorize(function(p) {return x**p}))
plot(Vectorize(function(p) {x**p}))
plot(function(p) {x**p})
plot(function(p) {1**p})
plot(function(p) {2**p})
plot(function(x,p) {x**p})
wa
wa <- rnorm(100, 3,sd=0.3)
wa
hist(wa)
table(wa)
ua <- (wa/sum(wa))[-100]
ua
cua <- cumsm(ua)
cua <- cumsum(ua)
wb <- rnorm(99, 10, sd=1)
wb
ub <- (wb/wum(wb))[-99]
ub <- (wb/sum(wb))[-99]
cub <- c(cumsum(ub))
cub
cua
temp <- cut(cub, breaks = c(-Inf, cua, Inf))
temp
arep<- table(temp) +1
arep
temp <- cut(cua, breaks= c(-Inf, cub, Inf))
brep <- table (temp ) +
1
brep
arep
len(arep)
length(arep=)
length(arep)
length(brep)
help("cut")
aa <- rep(sort(c(100), times = arep)
)
aa <- rep(sort(c(100)), times = arep)
arep
length(arep)
aa <- rep(sort(rep(1,100)), times = arep)
aa
help(rep)
length(aa)
bb <. rep(sort(rep(2,99)), times=brep)
bb <- rep(sort(rep(2,99)), times=brep)
bb
length(bb9)
length(bb)
length(aa9)
length(aa)
uu <- sort(c(cua, cub))
uu0 <- c(0,uu)
uu1 <- c(uu,1)
uu0
uu1
areap <- sum((uu1-uu0) * abs(bb- aa) **p) ** (1/p)
arep
areap
rep(c(1,2), times=c(1,2))
rep(c(1,2,3), times=c(1,2,0))
rep(c(1,2,3), times=c(1,2,1))
NULL
cut(c(1:100), breaks=c(-Inf, c(1:80), Inf))
cut(c(1:100), breaks=c(-Inf, c(1:120), Inf))
table(cut(c(1:100), breaks=c(-Inf, c(1:120), Inf)))
w <- rnorm(2,sd=0.2)
w/sum(w)
w <- rnorm(20,mean=3,sd=0.2)
w
ua <- w/sum(w)
ua
sum(ua)
ua <- w/sum(w)[-30]
ua
ua <- w/sum(w)[-20]
ua
ua <- (w/sum(w))[-20]
ua
x <- rnorm(10, 8, 0.2)
x
y <-rnorm(10, 2, 0.3)
y
x
y
z <- c(x,y)
nsample <- length(z)
nsample
bsn <- 100
shuffle <- sapply(1:bsn, function(j) sample(z, nsample, replace = FALSE))
shuffle
wass.val<-sapply(1:bsn,function (k) {wasserstein1d(shuffle[1:length(x),k],shuffle[(length(x)+1):nsample,k],p=2)})
wasser.val
wass.val
wass.val ^2
z
(shuffle[1:length(x),k]
shuffle[1:length(x),k]
shuffle[1:length(x),k]
shuffle[1:length(x),100]
z
sample(z, 20, replace=FALSE)
shuffle <- sapply(1:3, function(j) sample(z, nsample, replace = FALSE))
shuffle
shuffle <- sapply(1:100, function(j) sample(z, nsample, replace = FALSE))
shuffle
edit(sample)
edit(sample.int)
edit(.Internal.sample)
edit(.Internal(sample))
edit(sample2
)
help("apply")
help("lapply")
c(1,2) %in% c(2,1)
c(1,2) %in% c(2,1,2)
c(1,2) %in% c(2,1,3)
c(1,2) %in% c(2)
shuffle
typeof(shuffle)
shuffle[1,1]
shuffle[1
]
shuffle[1,]
shuffle[,2]
length(shuffle)
shuffle
help("sapply")
help(all)
l1 <- c(TRUE, TRUE)
l2 <- c(TRUE, TRUE, TRUE)
l3 <- c(l1, l2)
all(l3)
getcwd()
cwd()
getwd()
dir()
sourceCpp("wasserstein_test.cpp")
vec <- rnorm(100)
df <- permutations(vec, 10)
sourceCpp("wasserstein_test.cpp")
permutate
permutation
permutations
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 10)
df
dim(df)
df[1,]
df[1,3]
df[1,4]
df[1,]
df[1,5]
df[,1]
df[2,]
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 10)
df
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 10)
sourceCpp("wasserstein_test.cpp")
df
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 10)
df
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 10)
df
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 10)
df
head(df)
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 10)
head(df)
df <- permutations(vec, 12)
head(df)
sourceCpp("wasserstein_test.cpp")
df <- permutations(vec, 12)
sourceCpp("wasserstein_test.cpp")
head(df)
df <- permutations(vec, 10000)
View(df)
df[1,1]
df[,1
]
typeof(df)
View(df)
library("rbenchmark")
benchmark(permutations(vec, 10000), sapply(1:10000, function(j) vec))
sourceCpp("wasserstein_test.cpp")
install.packages("RccpArmadillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo", repos = "https://github.com/cran/RcppArmadillo")
library("RcppArmadillo")
sourceCpp("wasserstein_test.cpp")
chooseCRANmirror()
install.packages("RcppArmadillo")
setRepositories()
setRepositories()
install.packages("RcppArmadillo")
sourceCpp("wasserstein_test.cpp")
library("RcppArmadillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo",dependencies = TRUE)
SHLIB
source("Rcpp")
source("RCpp")
source("rcpp")
library("Rcpp")
install.packages("RcppArmadillo",dependencies = TRUE)
sourceCpp("wasserstein_test.cpp")
library("RcppArmadillo")
sourceCpp("wasserstein_test.cpp")
install.packages("RcppArmadillo")
