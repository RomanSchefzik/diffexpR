// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _wasserstein_test_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// numericVectorRep
NumericVector numericVectorRep(int n, double e);
RcppExport SEXP _wasserstein_test_numericVectorRep(SEXP nSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(numericVectorRep(n, e));
    return rcpp_result_gen;
END_RCPP
}
// numericVectorMean
double numericVectorMean(NumericVector x);
RcppExport SEXP _wasserstein_test_numericVectorMean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(numericVectorMean(x));
    return rcpp_result_gen;
END_RCPP
}
// numericVectorAbs
NumericVector numericVectorAbs(NumericVector x);
RcppExport SEXP _wasserstein_test_numericVectorAbs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(numericVectorAbs(x));
    return rcpp_result_gen;
END_RCPP
}
// numericVectorSum
double numericVectorSum(NumericVector x);
RcppExport SEXP _wasserstein_test_numericVectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(numericVectorSum(x));
    return rcpp_result_gen;
END_RCPP
}
// permutate
NumericVector permutate(NumericVector x, bool replace, NumericVector prob);
RcppExport SEXP _wasserstein_test_permutate(SEXP xSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(permutate(x, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// permutations
List permutations(NumericVector x, int num_permutations);
RcppExport SEXP _wasserstein_test_permutations(SEXP xSEXP, SEXP num_permutationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_permutations(num_permutationsSEXP);
    rcpp_result_gen = Rcpp::wrap(permutations(x, num_permutations));
    return rcpp_result_gen;
END_RCPP
}
// wasserstein_metric
double wasserstein_metric(NumericVector a, NumericVector b, float p, Nullable<NumericVector> wa_, Nullable<NumericVector> wb_);
RcppExport SEXP _wasserstein_test_wasserstein_metric(SEXP aSEXP, SEXP bSEXP, SEXP pSEXP, SEXP wa_SEXP, SEXP wb_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< float >::type p(pSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type wa_(wa_SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type wb_(wb_SEXP);
    rcpp_result_gen = Rcpp::wrap(wasserstein_metric(a, b, p, wa_, wb_));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_NumEx();
RcppExport SEXP _rcpp_module_boot_yada();
RcppExport SEXP _rcpp_module_boot_stdVector();

static const R_CallMethodDef CallEntries[] = {
    {"_wasserstein_test_rcpp_hello_world", (DL_FUNC) &_wasserstein_test_rcpp_hello_world, 0},
    {"_wasserstein_test_numericVectorRep", (DL_FUNC) &_wasserstein_test_numericVectorRep, 2},
    {"_wasserstein_test_numericVectorMean", (DL_FUNC) &_wasserstein_test_numericVectorMean, 1},
    {"_wasserstein_test_numericVectorAbs", (DL_FUNC) &_wasserstein_test_numericVectorAbs, 1},
    {"_wasserstein_test_numericVectorSum", (DL_FUNC) &_wasserstein_test_numericVectorSum, 1},
    {"_wasserstein_test_permutate", (DL_FUNC) &_wasserstein_test_permutate, 3},
    {"_wasserstein_test_permutations", (DL_FUNC) &_wasserstein_test_permutations, 2},
    {"_wasserstein_test_wasserstein_metric", (DL_FUNC) &_wasserstein_test_wasserstein_metric, 5},
    {"_rcpp_module_boot_NumEx", (DL_FUNC) &_rcpp_module_boot_NumEx, 0},
    {"_rcpp_module_boot_yada", (DL_FUNC) &_rcpp_module_boot_yada, 0},
    {"_rcpp_module_boot_stdVector", (DL_FUNC) &_rcpp_module_boot_stdVector, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_wasserstein_test(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
